package mandachord;

import java.util.LinkedList;
import java.util.List;
import javax.swing.*;

/**
 *
 * @author Bunnyspa
 */
public class MandachordJFrame extends javax.swing.JFrame {

    List<NoteComp> aNoteCompList;

    final int NOTE_VALUE_MAX = 23;
    final int NOTE_VALUE_MIN = 1;

    final int NOTE_CHECKBOX_H = 32;
    final int NOTE_SLIDER_H = 200;
    final int NOTE_NOTELABEL_H = 150;
    final int NOTE_MANDALABEL_H = 216;

    final int NOTE_W = 32;
    final int NOTE_H = NOTE_CHECKBOX_H + NOTE_SLIDER_H + NOTE_NOTELABEL_H + NOTE_MANDALABEL_H;
    final int NOTE_MINOR_GAP = 4;
    final int NOTE_MAJOR_GAP = 16 - NOTE_MINOR_GAP;

    /**
     * Creates new form aJFrame
     */
    public MandachordJFrame() {
        initComponents();
        aNoteCompList = new LinkedList<>();
        jPanel.setLayout(null);
        addNote();
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addJButton = new javax.swing.JButton();
        noteUpJButton = new javax.swing.JButton();
        noteDownJButton = new javax.swing.JButton();
        delJButton = new javax.swing.JButton();
        jScrollPane = new javax.swing.JScrollPane();
        jPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Mandachord");
        setPreferredSize(new java.awt.Dimension(700, 700));

        addJButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mandachord/plus.png"))); // NOI18N
        addJButton.setMaximumSize(new java.awt.Dimension(32, 32));
        addJButton.setMinimumSize(new java.awt.Dimension(32, 32));
        addJButton.setPreferredSize(new java.awt.Dimension(32, 32));
        addJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addJButtonActionPerformed(evt);
            }
        });

        noteUpJButton.setText("△");
        noteUpJButton.setMaximumSize(new java.awt.Dimension(48, 96));
        noteUpJButton.setMinimumSize(new java.awt.Dimension(48, 96));
        noteUpJButton.setPreferredSize(new java.awt.Dimension(48, 96));
        noteUpJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noteUpJButtonActionPerformed(evt);
            }
        });

        noteDownJButton.setText("▽");
        noteDownJButton.setMaximumSize(new java.awt.Dimension(48, 96));
        noteDownJButton.setMinimumSize(new java.awt.Dimension(48, 96));
        noteDownJButton.setPreferredSize(new java.awt.Dimension(48, 96));
        noteDownJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noteDownJButtonActionPerformed(evt);
            }
        });

        delJButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mandachord/trashbin.png"))); // NOI18N
        delJButton.setMaximumSize(new java.awt.Dimension(32, 32));
        delJButton.setMinimumSize(new java.awt.Dimension(32, 32));
        delJButton.setPreferredSize(new java.awt.Dimension(32, 32));
        delJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelLayout = new javax.swing.GroupLayout(jPanel);
        jPanel.setLayout(jPanelLayout);
        jPanelLayout.setHorizontalGroup(
            jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 522, Short.MAX_VALUE)
        );
        jPanelLayout.setVerticalGroup(
            jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 616, Short.MAX_VALUE)
        );

        jScrollPane.setViewportView(jPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(noteDownJButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(noteUpJButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(addJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(delJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 516, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 616, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(noteUpJButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(noteDownJButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(addJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(delJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(8, 8, 8))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void setPos() {
        for (int i = 0; i < aNoteCompList.size(); i++) {
            aNoteCompList.get(i).setPos(i);
        }
        int i = aNoteCompList.size();
        jPanel.setPreferredSize(new java.awt.Dimension(NOTE_W * i + NOTE_MINOR_GAP*(i/4) + NOTE_MAJOR_GAP * (i/16), NOTE_H));
    }

    public void updateNoteImage() {
        for (NoteComp noteComp : aNoteCompList) {
            noteComp.updateNoteImage();
        }
    }

    private void addNote() {
        aNoteCompList.add(new NoteComp(jPanel));
        setPos();
        updateNoteImage();
    }

    private void addJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addJButtonActionPerformed
        addNote();
    }//GEN-LAST:event_addJButtonActionPerformed

    private void delJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delJButtonActionPerformed
        if (aNoteCompList.size() > 0) {
            aNoteCompList.get(aNoteCompList.size() - 1).remove(jPanel);
            aNoteCompList.remove(aNoteCompList.size() - 1);
            setPos();
            revalidate();
            repaint();
        }
    }//GEN-LAST:event_delJButtonActionPerformed

    private void noteUpJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noteUpJButtonActionPerformed
        int max = NOTE_VALUE_MIN - 1;
        for (NoteComp noteComp : aNoteCompList) {
            if (max < noteComp.getValue() && noteComp.isEnabled()) {
                max = noteComp.getValue();
            }
        }
        if (max < NOTE_VALUE_MAX) {
            for (NoteComp noteComp : aNoteCompList) {
                noteComp.setValue(noteComp.getValue() + 1);
            }
        }
        updateNoteImage();
    }//GEN-LAST:event_noteUpJButtonActionPerformed

    private void noteDownJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noteDownJButtonActionPerformed
        int min = NOTE_VALUE_MAX + 1;
        for (NoteComp noteComp : aNoteCompList) {
            if (min > noteComp.getValue() && noteComp.isEnabled()) {
                min = noteComp.getValue();
            }
        }
        if (min > NOTE_VALUE_MIN) {
            for (NoteComp noteComp : aNoteCompList) {
                noteComp.setValue(noteComp.getValue() - 1);
            }
        }
        updateNoteImage();
    }//GEN-LAST:event_noteDownJButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the system look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel">
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MandachordJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MandachordJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MandachordJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MandachordJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MandachordJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addJButton;
    private javax.swing.JButton delJButton;
    private javax.swing.JPanel jPanel;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JButton noteDownJButton;
    private javax.swing.JButton noteUpJButton;
    // End of variables declaration//GEN-END:variables

    private class NoteComp {

        JCheckBox enabledJCheckBox;
        JSlider noteJSlider;
        JLabel noteJLabel;
        JLabel mandaJLabel;

        public NoteComp(JPanel jPanel) {
            enabledJCheckBox = new JCheckBox();
            noteJSlider = new JSlider();
            noteJLabel = new JLabel();
            mandaJLabel = new JLabel();

            enabledJCheckBox.setSize(new java.awt.Dimension(NOTE_W, NOTE_CHECKBOX_H));
            enabledJCheckBox.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
            enabledJCheckBox.setSelected(true);
            enabledJCheckBox.addChangeListener((javax.swing.event.ChangeEvent evt) -> {
                updateNoteImage();
            });

            noteJSlider.setSize(new java.awt.Dimension(NOTE_W, NOTE_SLIDER_H));
            noteJSlider.setOrientation(javax.swing.JSlider.VERTICAL);
            noteJSlider.setPaintTicks(true);
            noteJSlider.setMinorTickSpacing(1);
            noteJSlider.setMajorTickSpacing(12);
            noteJSlider.setSnapToTicks(true);
            noteJSlider.setMaximum(NOTE_VALUE_MAX);
            noteJSlider.setValue(NOTE_VALUE_MIN);
            noteJSlider.setMinimum(NOTE_VALUE_MIN);
            noteJSlider.addChangeListener((javax.swing.event.ChangeEvent evt) -> {
                updateNoteImage();
            });

            noteJLabel.setSize(new java.awt.Dimension(NOTE_W, NOTE_NOTELABEL_H));
            noteJLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
            noteJLabel.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

            mandaJLabel.setSize(new java.awt.Dimension(NOTE_W, NOTE_MANDALABEL_H));

            jPanel.add(enabledJCheckBox);
            jPanel.add(noteJSlider);
            jPanel.add(noteJLabel);
            jPanel.add(mandaJLabel);
        }

        public void setPos(int i) {
            enabledJCheckBox.setLocation(NOTE_W * i + NOTE_MINOR_GAP*(i/4) + NOTE_MAJOR_GAP * (i/16), 0);
            noteJSlider.setLocation(NOTE_W * i + NOTE_MINOR_GAP*(i/4) + NOTE_MAJOR_GAP * (i/16), NOTE_CHECKBOX_H);
            noteJLabel.setLocation(NOTE_W * i + NOTE_MINOR_GAP*(i/4) + NOTE_MAJOR_GAP * (i/16), NOTE_CHECKBOX_H + NOTE_SLIDER_H);
            mandaJLabel.setLocation(NOTE_W * i + NOTE_MINOR_GAP*(i/4) + NOTE_MAJOR_GAP * (i/16), NOTE_CHECKBOX_H + NOTE_SLIDER_H + NOTE_NOTELABEL_H);
        }

        public void remove(JPanel jPanel) {
            jPanel.remove(enabledJCheckBox);
            jPanel.remove(noteJSlider);
            jPanel.remove(noteJLabel);
            jPanel.remove(mandaJLabel);
        }

        public int getValue() {
            return noteJSlider.getValue();
        }

        public void setValue(int i) {
            if (i >= NOTE_VALUE_MIN && i <= NOTE_VALUE_MAX) {
                noteJSlider.setValue(i);
            }
        }

        public boolean isEnabled() {
            return enabledJCheckBox.isSelected();
        }

        public void updateNoteImage() {
            String str;
            if (isEnabled()) {
                str = "/notes/" + getValue() + ".png";

            } else {
                str = "/notes/0.png";
            }
            noteJLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource(str)));
            mandaJLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/notes/m0.png")));
            if (isEnabled()) {
                int m = 0;
                switch (getValue() % 12) {
                    case 0:
                        noteJLabel.setText("<html>C#<br>" + getValue());
                        m = 0;
                        break;
                    case 1:
                        noteJLabel.setText("<html>D<br>" + getValue());
                        m = 1;
                        break;
                    case 2:
                        noteJLabel.setText("<html>D#<br>" + getValue());
                        m = 2;
                        break;
                    case 3:
                        noteJLabel.setText("<html>E<br>" + getValue());
                        m = 2;
                        break;
                    case 4:
                        noteJLabel.setText("<html>F<br>" + getValue());
                        m = 3;
                        break;
                    case 5:
                        noteJLabel.setText("<html>F#<br>" + getValue());
                        m = 4;
                        break;
                    case 6:
                        noteJLabel.setText("<html>G<br>" + getValue());
                        m = 5;
                        break;
                    case 7:
                        noteJLabel.setText("<html>G#<br>" + getValue());
                        m = 6;
                        break;
                    case 8:
                        noteJLabel.setText("<html>A<br>" + getValue());
                        m = 7;
                        break;
                    case 9:
                        noteJLabel.setText("<html>A#<br>" + getValue());
                        m = 8;
                        break;
                    case 10:
                        noteJLabel.setText("<html>B<br>" + getValue());
                        m = 8;
                        break;
                    case 11:
                        noteJLabel.setText("<html>C<br>" + getValue());
                        m = 9;
                        break;
                    default:
                        noteJLabel.setText(String.valueOf(getValue() % 12));
                        m = 0;
                }
                if (getValue() >= 12) {
                    m += 10;
                }
                mandaJLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/notes/m" + String.valueOf(m) + ".png")));
            } else {
                noteJLabel.setText("<html>-<br>-");
                mandaJLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/notes/m0.png")));
            }
        }
    }
}
